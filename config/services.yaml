# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:

services:
  # default configuration for services in *this* file
  _defaults:
    autowire: true # Automatically injects dependencies in your services.
    autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

  # makes classes in src/ available to be used as services
  # this creates a service per class whose id is the fully-qualified class name
  App\:
    resource: "../src/*"
    exclude: "../src/{DependencyInjection,Entity,Migrations,Tests,Kernel.php}"

  # controllers are imported separately to make sure services can be injected
  # as action arguments even if you don't extend any base controller class
  App\Controller\:
    resource: "../src/Controller"
    tags: ["controller.service_arguments"]

  # add more service definitions when explicit configuration is needed
  # please note that last definitions always *replace* previous ones
  App\EventSubscriber\EntityCreatedSubscriber:
    tags:
      - { name: doctrine.event_subscriber }

  # Définition d'un alias
  # Cet alias est en réalité un service
  # Vous pouvez le rechercher dans le container : php bin/console debug:container ynov
  # On le lie à la classe AuthenticationSuccessListener
  # Et on branche la méthode de classe sur l'événement voulu
  # Si on crée plus tard une nouvelle méthode qui serait branchée sur un autre événement,
  # alors on pourra créer un nouvel alias
  ynov_news.event.authentication_success_listener:
    class: App\EventListener\AuthenticationSuccessListener
    tags:
      - {
          name: kernel.event_listener,
          event: lexik_jwt_authentication.on_authentication_success,
          method: onAuthenticationSuccessResponse,
        }
